/*
 * ResearchPortal-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.Reflection;

namespace ResearchPortal.API.Models.Casrai
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FundedAward : IEquatable<FundedAward>
    {
        public FundedAward()
        {
            PrimaryAwardee = new FundedAwardee();
            Province = new LocalizedString();
            Country = new LocalizedString();
            ProgramName = new LocalizedString();
        }

        /// <summary>
        /// Gets or Sets Programid
        /// </summary>
        [DataMember(Name = "programid")]
        public string ProgramId { get; set; }

        [DataMember(Name = "programname")]
        public LocalizedString ProgramName { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "awardamount")]
        public decimal? AwardAmount { get; set; }

        [DataMember(Name = "applicationtitle")]
        public string ApplicationTitle { get; set; }

        /// <summary>
        /// Gets or Sets Startdate
        /// </summary>
        [DataMember(Name = "startdate")]
        public DateTime? Startdate { get; set; }

        /// <summary>
        /// Gets or Sets Enddate
        /// </summary>
        [DataMember(Name = "enddate")]
        public DateTime? Enddate { get; set; }

        [DataMember(Name = "fiscalyear")]
        public int? FiscalYear
        { get; set; }

        //CompetitionYear-Année de concours,AwardAmount,ProgramID,ProgramNaneEN,ProgramNameFR,GroupEN,GroupFR,CommitteeCode,CommitteeNameEN,CommitteeNameFR,AreaOfApplicationCode,AreaOfApplicationGroupEN,AreaOfApplicationGroupFR,AreaOfApplicationEN,AreaOfApplicationFR,ResearchSubjectCode,ResearchSubjectGroupEN,ResearchSubjectGroupFR,ResearchSubjectEN,ResearchSubjectFR,installment,Partie,Num_Partie,Nb_Partie,ApplicationTitle,Keyword,ApplicationSummary

        [DataMember(Name = "competitionyear")]
        public int? CompetitionYear
        { get; set; }



        //[DataMember(Name = "cle")]
        //public int? Cle
        //{ get; set; }

        [DataMember(Name = "primaryawardeename")]
        public string PrimaryAwardeeName
        { get; set; }
        [DataMember(Name = "primaryawardee")]
        public FundedAwardee PrimaryAwardee
        { get; set; }

        [DataMember(Name = "department")]
        public string Department
        { get; set; }


        [DataMember(Name = "organizationid")]
        public string OrganizationID
        { get; set; }

        [DataMember(Name = "institution")]
        public string Institution
        { get; set; }

        [DataMember(Name = "province")]
        public LocalizedString Province
        { get; set; }

        [DataMember(Name = "country")]
        public LocalizedString Country
        { get; set; }







        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append($"class {System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.ToString()} {{");
            foreach (PropertyInfo prop in this.GetType().GetProperties().Where(p => Attribute.IsDefined(p.PropertyType, typeof(DataMemberAttribute))))
            {
                DataMemberAttribute da = prop.GetCustomAttributes(typeof(DataMemberAttribute), true).FirstOrDefault() as DataMemberAttribute;
                sb.Append($"  {da.Name}: ").Append(prop.GetValue(this)).Append(Environment.NewLine);
            }
            sb.Append("}");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FundedAward)obj);
        }

        /// <summary>
        /// Returns true if FundingAward instances are equal
        /// </summary>
        /// <param name="other">Instance of FundingAward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundedAward other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    this.ProgramId == other.ProgramId ||
                    this.ProgramId != null &&
                    this.ProgramId.Equals(other.ProgramId)
                ) &&
                (
                    this.AwardAmount == other.AwardAmount ||
                    this.AwardAmount != null &&
                    this.AwardAmount.Equals(other.AwardAmount)
                ) &&
                (
                    this.Startdate == other.Startdate ||
                    this.Startdate != null &&
                    this.Startdate.Equals(other.Startdate)
                ) &&
                (
                    this.Enddate == other.Enddate ||
                    this.Enddate != null &&
                    this.Enddate.Equals(other.Enddate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProgramId != null)
                    hash = hash * 59 + this.ProgramId.GetHashCode();
                if (this.AwardAmount != null)
                    hash = hash * 59 + this.AwardAmount.GetHashCode();
                if (this.Startdate != null)
                    hash = hash * 59 + this.Startdate.GetHashCode();
                if (this.Enddate != null)
                    hash = hash * 59 + this.Enddate.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(FundedAward left, FundedAward right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FundedAward left, FundedAward right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
